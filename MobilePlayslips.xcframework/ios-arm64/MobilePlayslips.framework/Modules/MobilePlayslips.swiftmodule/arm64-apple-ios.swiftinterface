// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name MobilePlayslips
import CryptoKit
import DeveloperToolsSupport
import Foundation
import Lottie
@_exported import MobilePlayslips
import Photos
import ReSwift
import Swift
import SwiftUI
import UIColor_Hex_Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum HorizontalAlignment {
  case left
  case right
  case leading
  case trailing
  case justified
  public static func == (a: MobilePlayslips.HorizontalAlignment, b: MobilePlayslips.HorizontalAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum VerticalAlignment {
  case top
  case center
  case bottom
  public static func == (a: MobilePlayslips.VerticalAlignment, b: MobilePlayslips.VerticalAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) open class AlignedCollectionViewFlowLayout : UIKit.UICollectionViewFlowLayout {
  @_Concurrency.MainActor(unsafe) public var horizontalAlignment: MobilePlayslips.HorizontalAlignment
  @_Concurrency.MainActor(unsafe) public var verticalAlignment: MobilePlayslips.VerticalAlignment
  @_Concurrency.MainActor(unsafe) public init(horizontalAlignment: MobilePlayslips.HorizontalAlignment = .justified, verticalAlignment: MobilePlayslips.VerticalAlignment = .center)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutAttributesForItem(at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutAttributesForElements(in rect: CoreFoundation.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @objc deinit
}
public protocol ButtonDisplayable {
  var backgroundColor: UIKit.UIColor? { get }
  var titleColor: UIKit.UIColor? { get }
  var titleFont: UIKit.UIFont? { get }
  var tintColor: UIKit.UIColor? { get }
  var title: Swift.String? { get }
  var image: UIKit.UIImage? { get }
  var cornerRadius: CoreFoundation.CGFloat? { get }
  var borderWidth: CoreFoundation.CGFloat { get }
  var borderColor: UIKit.UIColor? { get }
  var disabledAlpha: CoreFoundation.CGFloat { get }
}
extension Swift.KeyedEncodingContainerProtocol {
  public mutating func encode(_ value: Swift.Dictionary<Swift.String, Any>?, forKey key: Self.Key) throws
  public mutating func encode(_ value: Swift.Array<Any>?, forKey key: Self.Key) throws
}
extension Swift.UnkeyedEncodingContainer {
  public mutating func encode(_ value: Swift.Array<Any>) throws
  public mutating func encode(_ value: Swift.Dictionary<Swift.String, Any>) throws
}
public enum DrawGameIdentifier : Swift.String, Swift.Codable, Swift.Equatable {
  case powerball
  case megabucksDoubler
  case massCash
  case megaMillions
  case luckyForLife
  case theNumbersGame
  case allOrNothing
  case keno
  case wheelOfLuck
  case none
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol MobilePlayslipsAnalyticsDelegate {
  func playslipCreated(gameIdentifier: Swift.String)
  func orderCreated(gameIdentifiers: [Swift.String])
  func orderSaved(gameIdentifiers: [Swift.String])
  func savedOrderViewed()
  func savedOrderEdit()
  func newOrderPlayslipEdit()
  func savedOrderPlayed()
}
public class MobilePlayslipsDelegate {
  public init()
  public func applicationClosed()
  public func setConfigurationDetails(host: Swift.String, lottery: Swift.String, apiBaseUrl: Swift.String, apiToken: Swift.String)
  public func applicationLaunched()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MobilePlayslipsGameEntryViewController : UIKit.UIViewController, ReSwift.StoreSubscriber {
  @_Concurrency.MainActor(unsafe) public var gameIdentifier: Swift.String?
  @_Concurrency.MainActor(unsafe) public var analyticsDelegate: (any MobilePlayslips.MobilePlayslipsAnalyticsDelegate)? {
    get
    set
  }
  public struct Props : Swift.Equatable {
    public static func == (lhs: MobilePlayslips.MobilePlayslipsGameEntryViewController.Props, rhs: MobilePlayslips.MobilePlayslipsGameEntryViewController.Props) -> Swift.Bool
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func newState(state: MobilePlayslips.MobilePlayslipsGameEntryViewController.Props)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias StoreSubscriberStateType = MobilePlayslips.MobilePlayslipsGameEntryViewController.Props
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MobilePlayslipsNewOrderViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var analyticsDelegate: (any MobilePlayslips.MobilePlayslipsAnalyticsDelegate)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MobilePlayslipsSavedOrdersViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var analyticsDelegate: (any MobilePlayslips.MobilePlayslipsAnalyticsDelegate)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MobilePlayslipsViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var analyticsDelegate: (any MobilePlayslips.MobilePlayslipsAnalyticsDelegate)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PhotoService : ObjectiveC.NSObject {
  public func captureScreen(of view: UIKit.UIView) -> UIKit.UIImage?
  public func saveScreenshot(fromView view: UIKit.UIView)
  @objc public func image(_ image: UIKit.UIImage, didFinishSavingWithError error: (any Swift.Error)?, contextInfo: Swift.UnsafeRawPointer)
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIFont {
  public static func igBoldFont(size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func igBoldSlabFont(size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func igBoldItalicFont(size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func igRegularFont(size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func igRegularSlabFont(size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func igItalicsFont(size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func ganache(size: CoreFoundation.CGFloat) -> UIKit.UIFont
}
extension MobilePlayslips.HorizontalAlignment : Swift.Equatable {}
extension MobilePlayslips.HorizontalAlignment : Swift.Hashable {}
extension MobilePlayslips.VerticalAlignment : Swift.Equatable {}
extension MobilePlayslips.VerticalAlignment : Swift.Hashable {}
extension MobilePlayslips.DrawGameIdentifier : Swift.Hashable {}
extension MobilePlayslips.DrawGameIdentifier : Swift.RawRepresentable {}
